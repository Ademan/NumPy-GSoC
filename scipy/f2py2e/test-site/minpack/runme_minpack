#!/bin/sh
# $Revision: 1.14 $ $Date: 2000/09/10 12:35:45 $
# Pearu Peterson <pearu@ioc.ee>

f2py2e='python ../../f2py2e.py'

$f2py2e minpack-smart.pyf only: hybrd fcnd lmdif fcnd2 enorm \
    --overwrite-makefile -makefile src/*.f --use-libs --debug-capi2
gmake -f Makefile-minpack clean minpack

python  -c '\
from Numeric import array,zeros,asarray
import minpack
from minpack import *
print hybrd.__doc__
print lmdif.__doc__
print enorm.__doc__
print """
1) Try the following and observe top (indicator of a memory leak):
x=array(range(100),"d")
while 1: e=enorm(x)

def fun(x,f=None):
    m=asarray(m)
    if m[0]==0: m[0]=3
    if f is None:
    	f=zeros(m,"d")
    f[0]=x[0]+x[1]
    f[1]=4+x[0]*x[1]
    if m[0]>2: f[2]=x[0]/x[1]
    if m[0]>3: f[2]=1-x[0]/x[1]
    return f
2) hybrd test:
x=array([1,2],"d")
hybrd(fun,x)
3) lmdif test:
x=array([1,2],"d")
f=fun(x,m=4)
lmdif(fun,x,f)
"""
def fun(x,f=None,iflag=0,m=0,n=0):
    m=asarray(m)
    if m[0]==0: m[0]=3
    fl=0
    if f is None:
	fl=1
    	f=zeros(m,"d")
    f[0]=x[0]+x[1]
    f[1]=5+x[0]*x[1]
    if m[0]>2: f[2]=x[0]/x[1]
    if m[0]>3: f[2]=1-x[0]/x[1]
    print "x,f=",`x`,`f`
    return f[:2],
x=array([1,2],"d")
#print "x=",x
#print "hybrd(fun,x)=",hybrd(fun,x)
#print "x,|f|_e=",x,enorm(fun(x,m=2))
f=fun(x,m=2)
x=array([1,2],"d")
print "x=",x,f
print "lmdif(fun,x,f)=",lmdif(fun,x,f)
#print "x,|f|_e=",x,enorm(fun(x,m=2))
print "ok"
'

