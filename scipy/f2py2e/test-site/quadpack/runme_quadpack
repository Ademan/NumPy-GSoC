#!/bin/sh
# $Revision: 1.3 $ $Date: 2000/01/24 17:35:42 $
# Pearu Peterson <pearu@ioc.ee>
echo "This script is not ready"
exit 1
f2py2e=../../f2py2e.py
#rm -f quadpack-raw.f90
#$f2py2e src/*.f -h quadpack-raw.f90 -m quadpack
#$f2py2e quadpack-raw.f90
#exit 1

$f2py2e quadpack-smart.f90
gcc -g -I/numeric/include/python1.5 -shared -o minpackmodule.so -L/numeric/lib minpackmodule.c -lminpack -lg2c 
nice -19 python -i -c '\
from Numeric import array,zeros,asarray
import minpack
print dir(minpack)
from minpack import _control
from minpack import *
_control["warn-about-array-type-cast"]=1
_control["warn-about-scalar-type-cast"]=1
_control["warn-about-non-array-argument"]=1
print hybrd.__doc__
print lmdif.__doc__
print """
1) Try the following and observe top (indicator of a memory leak):
x=array(range(100),"d")
while 1: e=enorm(x)

def fun(x,f=None):
    m=asarray(m)
    if m[0]==0: m[0]=3
    if f is None:
    	f=zeros(m,"d")
    f[0]=x[0]+x[1]
    f[1]=4+x[0]*x[1]
    if m[0]>2: f[2]=x[0]/x[1]
    if m[0]>3: f[2]=1-x[0]/x[1]
    return f
2) hybrd test:
x=array([1,2],"d")
hybrd(fun,x)
3) lmdif test:
x=array([1,2],"d")
f=fun(x,m=4)
lmdif(fun,x,f)
"""
def fun(x,f=None,iflag=0,m=0,n=0):
    m=asarray(m)
    if m[0]==0: m[0]=3
    if f is None:
    	f=zeros(m,"d")
    f[0]=x[0]+x[1]
    f[1]=5+x[0]*x[1]
    if m[0]>2: f[2]=x[0]/x[1]
    if m[0]>3: f[2]=1-x[0]/x[1]
    return f
x=array([1,2],"d")
print "x=",x
print "hybrd(fun,x)=",hybrd(fun,x)
print "x,|f|_e=",x,enorm(fun(x,m=2))
f=fun(x,m=4)
x=array([1,2],"d")
print "x=",x
print "lmdif(fun,x,f)=",lmdif(fun,x,f)
print "x,|f|_e=",x,enorm(fun(x))
'

